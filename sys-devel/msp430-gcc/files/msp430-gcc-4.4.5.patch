diff --git gcc-4.4.5.orig/configure gcc-4.4.5/configure
index 2925c1a..994f6b5 100755
--- gcc-4.4.5.orig/configure
+++ gcc-4.4.5/configure
@@ -2360,6 +2360,9 @@ case "${target}" in
   avr-*-*)
     noconfigdirs="$noconfigdirs target-libiberty target-libstdc++-v3 ${libgcj} target-libssp"
     ;;
+  msp430-*-*)
+    noconfigdirs="$noconfigdirs target-libiberty target-libstdc++-v3 ${libgcj} target-libssp"
+    ;;
   bfin-*-*)
     noconfigdirs="$noconfigdirs gdb"
     if test x${is_cross_compiler} != xno ; then
diff --git gcc-4.4.5.orig/gcc/config.gcc gcc-4.4.5/gcc/config.gcc
index 6f72224..bb06db3 100644
--- gcc-4.4.5.orig/gcc/config.gcc
+++ gcc-4.4.5/gcc/config.gcc
@@ -810,6 +810,12 @@ avr-*-rtems*)
 avr-*-*)
 	tm_file="avr/avr.h dbxelf.h"
 	;;
+msp430-*-*)
+	tm_file="msp430/msp430.h dbxelf.h"
+	c_target_objs=`cat ${srcdir}/config/msp430/objs-extra`
+	cxx_target_objs=`cat ${srcdir}/config/msp430/objs-extra`
+	use_fixproto=yes
+	;;
 bfin*-elf*)
 	tm_file="${tm_file} dbxelf.h elfos.h bfin/elf.h"
 	tmake_file=bfin/t-bfin-elf
diff --git gcc-4.4.5.orig/gcc/configure gcc-4.4.5/gcc/configure
index 64cdd91..d881a06 100755
--- gcc-4.4.5.orig/gcc/configure
+++ gcc-4.4.5/gcc/configure
@@ -1595,6 +1595,7 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu
 
 
 gcc_version=`cat $srcdir/BASE-VER`
+echo $gcc_version | sed s/\\\([0-9]\\\)\.\\\([0-9]\\\)\.\\\([0-9]\\\)/\#define\ GCC_VERSION_INT\ 0x\\1\\2\\3/g > $srcdir/_gccver.h
 
 # Determine the host, build, and target systems
 ac_aux_dir=
@@ -23819,6 +23820,7 @@ esac
 case "$target" in
   i?86*-*-* | mips*-*-* | alpha*-*-* | powerpc*-*-* | sparc*-*-* | m68*-*-* \
   | x86_64*-*-* | hppa*-*-* | arm*-*-* \
+  | msp430-*-* \
   | xstormy16*-*-* | cris-*-* | crisv32-*-* | xtensa*-*-* | bfin-*-* | score*-*-* \
   | spu-*-* | fido*-*-* | m32c-*-*)
     insn="nop"
diff --git gcc-4.4.5.orig/gcc/dse.c gcc-4.4.5/gcc/dse.c
index 3d347ce..844fd51 100644
--- gcc-4.4.5.orig/gcc/dse.c
+++ gcc-4.4.5/gcc/dse.c
@@ -826,7 +826,7 @@ replace_inc_dec (rtx *r, void *d)
     case POST_INC:
       {
 	rtx r1 = XEXP (x, 0);
-	rtx c = gen_int_mode (Pmode, data->size);
+	rtx c = gen_int_mode (data->size, Pmode);
 	emit_insn_before (gen_rtx_SET (Pmode, r1, 
 				       gen_rtx_PLUS (Pmode, r1, c)),
 			  data->insn);
@@ -837,7 +837,7 @@ replace_inc_dec (rtx *r, void *d)
     case POST_DEC:
       {
 	rtx r1 = XEXP (x, 0);
-	rtx c = gen_int_mode (Pmode, -data->size);
+	rtx c = gen_int_mode (-data->size, Pmode);
 	emit_insn_before (gen_rtx_SET (Pmode, r1, 
 				       gen_rtx_PLUS (Pmode, r1, c)),
 			  data->insn);
diff --git gcc-4.4.5.orig/gcc/emit-rtl.c gcc-4.4.5/gcc/emit-rtl.c
index a91e7fd..0574d52 100644
--- gcc-4.4.5.orig/gcc/emit-rtl.c
+++ gcc-4.4.5/gcc/emit-rtl.c
@@ -1686,7 +1686,8 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,
       base = get_base_address (base);
       if (base && DECL_P (base)
 	  && TREE_READONLY (base)
-	  && (TREE_STATIC (base) || DECL_EXTERNAL (base)))
+	  && (TREE_STATIC (base) || DECL_EXTERNAL (base))
+          && !TREE_THIS_VOLATILE (base))
 	{
 	  tree base_type = TREE_TYPE (base);
 	  gcc_assert (!(base_type && TYPE_NEEDS_CONSTRUCTING (base_type))
diff --git gcc-4.4.5.orig/gcc/expr.c gcc-4.4.5/gcc/expr.c
index b6bc529..9e93287 100644
--- gcc-4.4.5.orig/gcc/expr.c
+++ gcc-4.4.5/gcc/expr.c
@@ -955,7 +955,7 @@ move_by_pieces (rtx to, rtx from, unsigned HOST_WIDE_INT len,
 	  data.autinc_from = 1;
 	  data.explicit_inc_from = -1;
 	}
-      if (USE_LOAD_POST_INCREMENT (mode) && ! data.autinc_from)
+      if (USE_LOAD_POST_INCREMENT (mode) && !data.reverse && !data.autinc_from)
 	{
 	  data.from_addr = copy_addr_to_reg (from_addr);
 	  data.autinc_from = 1;
diff --git gcc-4.4.5.orig/gcc/loop-invariant.c gcc-4.4.5/gcc/loop-invariant.c
index 7eaabf7..0d0585e 100644
--- gcc-4.4.5.orig/gcc/loop-invariant.c
+++ gcc-4.4.5/gcc/loop-invariant.c
@@ -1171,11 +1171,13 @@ move_invariant_reg (struct loop *loop, unsigned invno)
   rtx reg, set, dest, note;
   struct use *use;
   bitmap_iterator bi;
+  int n_validated;
 
   if (inv->reg)
     return true;
   if (!repr->move)
     return false;
+  n_validated = num_validated_changes ();
   /* If this is a representative of the class of equivalent invariants,
      really move the invariant.  Otherwise just replace its use with
      the register used for the representative.  */
@@ -1200,7 +1202,17 @@ move_invariant_reg (struct loop *loop, unsigned invno)
       reg = gen_reg_rtx_and_attrs (dest);
 
       /* Try replacing the destination by a new pseudoregister.  */
-      if (!validate_change (inv->insn, &SET_DEST (set), reg, false))
+      validate_change (inv->insn, &SET_DEST (set), reg, true);
+
+      /* Replace the uses we know to be dominated.  It saves work for copy
+	 propagation, and also it is necessary so that dependent invariants
+	 are computed right.  */
+      /* Note that we must test the changes for validity, lest we might
+	 rip apart a match_dup between a use and a clobber.  */
+      if (inv->def)
+	for (use = inv->def->uses; use; use = use->next)
+	  validate_change (use->insn, use->pos, reg, true);
+      if (!apply_change_group ())
 	goto fail;
       df_insn_rescan (inv->insn);
 
@@ -1221,9 +1233,23 @@ move_invariant_reg (struct loop *loop, unsigned invno)
     }
   else
     {
-      if (!move_invariant_reg (loop, repr->invno))
-	goto fail;
+      /* Replace the uses we know to be dominated.  It saves work for copy
+	 propagation, and also it is necessary so that dependent invariants
+	 are computed right.  */
       reg = repr->reg;
+      if (inv->def)
+        for (use = inv->def->uses; use; use = use->next)
+	  validate_change (use->insn, use->pos, reg, true);
+
+      if (verify_changes (n_validated)
+	  && move_invariant_reg (loop, repr->invno))
+	confirm_change_group ();
+      else
+	{
+	  cancel_changes (n_validated);
+	  goto fail;
+	}
+
       set = single_set (inv->insn);
       emit_insn_after (gen_move_insn (SET_DEST (set), reg), inv->insn);
       delete_insn (inv->insn);
@@ -1232,17 +1258,9 @@ move_invariant_reg (struct loop *loop, unsigned invno)
 
   inv->reg = reg;
 
-  /* Replace the uses we know to be dominated.  It saves work for copy
-     propagation, and also it is necessary so that dependent invariants
-     are computed right.  */
   if (inv->def)
-    {
-      for (use = inv->def->uses; use; use = use->next)
-	{
-	  *use->pos = reg;
-	  df_insn_rescan (use->insn);
-	}      
-    }
+    for (use = inv->def->uses; use; use = use->next)
+      df_insn_rescan (use->insn);
 
   return true;
 
diff --git gcc-4.4.5.orig/libgcc/config.host gcc-4.4.5/libgcc/config.host
index 55af651..23aa200 100644
--- gcc-4.4.5.orig/libgcc/config.host
+++ gcc-4.4.5/libgcc/config.host
@@ -224,6 +224,8 @@ avr-*-*)
     # Make HImode functions for AVR
     tmake_file=${cpu_type}/t-avr
 	;;
+msp430-*-*)
+	;;
 bfin*-elf*)
         ;;
 bfin*-uclinux*)
