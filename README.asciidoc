MSP430-overlay
==============

How to use this overlay
-----------------------
* Add this overlay to your Gentoo system. Use the command
+
............................
 # layman -a msp430
............................
+
if you're already using layman to manage your overlays. See the
http://www.gentoo.org/proj/en/overlays/userguide.xml[overlay user guide]
for more information on overlay management with layman.

* Install sys-devel/crossdev from this overlay which includes support for
generating msp430 and avr32 cross-compile toolchains. For >=portage-2.1.10 you
can run
+
..........................
 # emerge crossdev::msp430
..........................
+
Otherwise the standard
+
..........................
 # emerge -av crossdev
..........................
+
should usually work, but be sure to confirm that portage is going to install
crossdev from this overlay before continuing.


Creating cross-compile toolchains on Gentoo
-------------------------------------------
Cross-compile toolchains are created using a tool called crossdev on Gentoo.
See the
http://www.gentoo.org/proj/en/base/embedded/cross-development.xml[cross-compiler
section] of the Gentoo Embedded Handbook for more details.

MSP430
~~~~~~
* Create a standard MSP430 cross-compile toolchain.
+
.................................
 # crossdev -t msp430
.................................
+
Note that you can also specify a specific version for any toolchain package and
build optional packages like gdb. To find how to specify such options use the
following command:
+
...................
 # crossdev --help
...................

////
* Once crossdev successfully creates a toolchain you should symlink the
ldscripts folder into a place where the linker will find it. If you don't do
this you may run into problems discussed in
http://bugs.gentoo.org/show_bug.cgi?id=147155[bug #147155], especially if
you're using flags specifying specific instruction sets. Run the command:
+
.........................................................................
 # ln -s /usr/$CHOST/msp430/lib/ldscripts /usr/msp430/lib/ldscripts
.........................................................................
+
where $CHOST is something like x86_64-pc-linux-gnu or i686-pc-linux-gnu for
standard amd64 or x86 architectures running Gentoo.
////

* [red]#*WARNING*#: Currently installing msp430-binutils will delete the ldscripts
installed by msp430mcu in /usr/msp430/lib/ldscripts so you'll have to re-emerge
msp430mcu every time msp430-binutils is updated. The main error you may see
if this has occurred is the following:
+
.................................................................................................
# /usr/libexec/gcc/msp430/ld: cannot open linker script file memory.x: No such file or directory
.................................................................................................
+
Simply re-emerging msp430mcu should fix this problem. It is also possible to
edit the binutils-config script to fix the problem more permanently. See
https://bugs.gentoo.org/show_bug.cgi?id=381633[bug #381633] for more
information.

AVR32
~~~~~
* Install a version of gcc-4.2 if you don't have a version from the 4.2 slot
installed on the host machine. This can be done using the following command: 
+
........................
 # emerge sys-devel/gcc:4.2
........................
+
which will install the latest version in the 4.2 slot
(4.2.4). Note that you'll probably want to modify the useflags for the gcc
build since you don't need fortran support, etc.
+
GCC-4.2 is required (it may also work with earlier releases in the 4.x series
but I haven't tested) because the latest avr32 crosscompile toolchain will
throw assembler errors (similar to the invalid register list errors described
http://www.atmel.no/buildroot/buildroot-issues.html[here]) while building gcc
if you are using
>=gcc-4.3 on the host machine to build the cross-compile toolchain.

* Use gcc-config to switch to the gcc-4.2 profile.
+
....................
 # gcc-config 4.2.4
....................

* Start crossdev on its way:
+
..........................................
 # crossdev -t avr32-unknown-linux-uclibc
..........................................

* Don't forget to use gcc-config to switch back to your original gcc profile
after the cross-compile toolchain has finished building.
